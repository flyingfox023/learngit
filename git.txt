git init 初始化
git add xxx.txt 添加到仓库
git commit 提交到仓库  （git commit -m "提交声明")
git status 可以让我们时刻掌握仓库当前的状态
git diff xxx.txt  查看不同(工作区和暂存区的区别)
git log 命令显示从最近到最远的提交日志
git reset --hard HEAD^(或者commit id) 回到上一个版本（或者某一次提交的版本）
git diff HEAD -- xxx.txt  命令可以查看工作区和版本库里面最新版本的区别
git checkout -- xxx.txt 意思就是，把xxx.txt文件在工作区的修改全部撤销.
		
		这里有两种情况：

		一种是xxx.txt自修改后还没有被放到暂存区，现在，撤销修改就回到	
		和版本库一模一样的状态；

		一种是xxx.txt已经添加到暂存区后，又作了修改，现在，撤销修改就	
		回到添加到暂存区后的状态。
git reset HEAD xxx.txt  可以把暂存区的修改撤销掉（unstage），重新放回工作区
rm xxx.txt 删除文件后两种选择
		1.真删   git rm xxx.txt     git commit -m "remove xxx.txt"
		2.误删   git checkout -- xxx.txt
		(git checkout其实是用版本库里的版本替换工作区的版本，无论工作区
		是修改还是删除，都可以“一键还原”。)


远程仓库跟本地关联（两种情况）
1.本地关联到github
	(1)git remote add origin git@github.com:xxxxxxxxxxxx/xxxxx.git 先关联
	(2)git push -u origin master   推送本地到github(第一次)
	(3)git push origin master    推送到github(非第一次) 
2.github关联到本地
	git clone git@github.com:xxxxxxxxxxxx/xxxxx.git


git checkout -b xxx(或者git switch -c xxx) 创建xxx分支(相当于  git branch dev    git checkout xxx)
git branch 查看当前分支
git checkout master(或者git switch master) 切换到主分支
git merge xxx(或者git merge --no-ff -m "xxxxxxxxx" xxx)  把xxx分支合并过来(--no-ff参数，表示禁用Fast forward，可以看到分支的commit操作，能看出曾经合并过)
git branch -d xxx   删除xxx分支
git log --graph命令可以看到分支合并图。
git stash 把当前工作现场储存起来，等以后恢复现场后继续工作
git stash list 现场工作列表
恢复工作现场
1.git stash apply  恢复后，stash内容并不删除，你需要用git stash drop来删除
2.git stash pop   恢复的同时把stash内容也删了
3.git stash apply stash@{0} 可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash

git cherry-pick xxxxxxx<commit_id>  master上改动（如debug）转移到当前分支上
